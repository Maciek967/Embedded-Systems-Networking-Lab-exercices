#include "contiki.h"
#include "net/rime.h"
#include "random.h"

#include "dev/button-sensor.h"
#include "dev/sht11-sensor.h"

#include "dev/leds.h"

#include <stdio.h>

#include "lib/list.h"
#include "lib/memb.h"

/*---------------------------------------------------------------------------*/
struct broadcast_message {
  uint8_t seqno;
};

struct neighbor {
  
  struct neighbor *next;

  rimeaddr_t addr;

  uint16_t last_rssi, last_lqi;

};

#define MAX_NEIGHBORS 16

MEMB(neighbors_memb, struct neighbor, MAX_NEIGHBORS);

LIST(neighbors_list);

static const struct broadcast_callbacks broadcast_call;
static struct broadcast_conn broadcast;
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
PROCESS(example_broadcast_process, "Broadcast");
PROCESS(temperatureHumidity, "Temperature and Humidity");
/*---------------------------------------------------------------------------*/

AUTOSTART_PROCESSES(&temperatureHumidity, &example_broadcast_process);

//This function is called whenever a broadcast message is received
static void
broadcast_recv(struct broadcast_conn *c, const rimeaddr_t *from)
{
  struct neighbor *n;
  struct broadcast_message *m;

  m = packetbuf_dataptr();

  //Check if we already know this neighbor
  for(n = list_head(neighbors_list); n != NULL; n = list_item_next(n)) {

    if(rimeaddr_cmp(&n->addr, from)) {
      break;
    }
  }

  if(n == NULL) {
    n = memb_alloc(&neighbors_memb);

    if(n == NULL) {
      return;
    }

    rimeaddr_copy(&n->addr, from);

    list_add(neighbors_list, n);
  }

  n->last_rssi = packetbuf_attr(PACKETBUF_ATTR_RSSI);
  n->last_lqi = packetbuf_attr(PACKETBUF_ATTR_LINK_QUALITY);

  //Print out a message
  printf("Broadcast message received from %d.%d, RSSI %u, LQI %u",
         from->u8[0], from->u8[1],
         
         packetbuf_attr(PACKETBUF_ATTR_RSSI),
         packetbuf_attr(PACKETBUF_ATTR_LINK_QUALITY));
         printf("\n");
}

static const struct broadcast_callbacks broadcast_call = {broadcast_recv};

//BROADCAST PROCESS
PROCESS_THREAD(example_broadcast_process, ev, data)
{

	leds_on(LEDS_GREEN);

	SENSORS_ACTIVATE(button_sensor);

	PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

  	PROCESS_BEGIN();

	broadcast_open(&broadcast, 129, &broadcast_call);

while(1) 
  	{

    /* Delay 2-4 seconds */
    //etimer_set(&et, CLOCK_SECOND * 4 + random_rand() % (CLOCK_SECOND * 4));

    	PROCESS_WAIT_EVENT_UNTIL((ev==sensors_event) && (data == &button_sensor));

    		packetbuf_copyfrom("Maciej", 7);
    		broadcast_send(&broadcast);
    		printf("Broadcast message sent\n");

		
  	}
leds_off(LEDS_GREEN);
PROCESS_END();
	
  	
}

//TEMPERATURE AND HUMIDITY PROCESS
PROCESS_THREAD(temperatureHumidity, ev, data)
{
  static struct etimer et;

    static int counter = 0;
    static int dec;
    static float s = 0;
    static int averageTemperature = 0;
    static int averageHumidity = 0;
    static int val;
  
PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

PROCESS_BEGIN();

SENSORS_ACTIVATE(button_sensor);
	while(counter < 5) //AVERAGE OVER 5 SAMPLES
	{
    		etimer_set(&et, CLOCK_SECOND * 2);
    		SENSORS_ACTIVATE(sht11_sensor);

    		PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
		
		//TEMPERATURE:
     		val = sht11_sensor.value(SHT11_SENSOR_TEMP);

        	if(val != -1) 
        	{
          		s = ((0.01*val) - 39.60);          
        	}

        	dec = s;
        	averageTemperature = averageTemperature + dec;

		//HUMIDITY:
		val =sht11_sensor.value(SHT11_SENSOR_HUMIDITY);
	
		if(val != -1) 
		{
			s= (((0.0405*val) - 4) + ((-2.8 * 0.000001)*(pow(val,2))));  
		}		
      		
		dec = s;
		averageHumidity = averageHumidity + dec;
 
		counter ++;
    	}
    	averageTemperature = averageTemperature/5;
	averageHumidity = averageHumidity/5;
	
	//DISPLAYS AVARAGE TEMPERATURE
   	printf("\nAverage Temperature=%d C\n", averageTemperature);

	//DISPLAY AVARAGE HUMIDITY
	printf("\nAverage Humidity=%d%\n", averageHumidity);
	printf("\n");

	etimer_reset(&et);
	SENSORS_DEACTIVATE(sht11_sensor);
	PROCESS_END();
  }
/*---------------------------------------------------------------------------*/
