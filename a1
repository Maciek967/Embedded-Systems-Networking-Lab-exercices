#include "contiki.h"
#include "net/rime.h"
#include "random.h"

#include "dev/button-sensor.h"
#include "dev/sht11-sensor.h"

#include "dev/leds.h"

#include <stdio.h>

/*---------------------------------------------------------------------------*/
static const struct broadcast_callbacks broadcast_call;
static struct broadcast_conn broadcast;
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
PROCESS(example_broadcast_process, "Broadcast");
PROCESS(temperatureHumidity, "Temperature and Humidity");
/*---------------------------------------------------------------------------*/

AUTOSTART_PROCESSES(&temperatureHumidity, &example_broadcast_process);

//BROADCAST PROCESS
PROCESS_THREAD(example_broadcast_process, ev, data)
{
	SENSORS_ACTIVATE(button_sensor);

	PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

  	PROCESS_BEGIN();

	broadcast_open(&broadcast, 129, &broadcast_call);

while(1) 
  	{

    /* Delay 2-4 seconds */
    //etimer_set(&et, CLOCK_SECOND * 4 + random_rand() % (CLOCK_SECOND * 4));

    	PROCESS_WAIT_EVENT_UNTIL((ev==sensors_event) && (data == &button_sensor));

    		packetbuf_copyfrom("Maciej", 7);
    		broadcast_send(&broadcast);
    		printf("Broadcast message sent\n");
  	}
PROCESS_END();
	
  	
}

//TEMPERATURE AND HUMIDITY PROCESS
PROCESS_THREAD(temperatureHumidity, ev, data)
{
  static struct etimer et;

    static int counter = 0;
    static int dec;
    static float s = 0;
    static int averageTemperature = 0;
    static int averageHumidity = 0;
    static int val;
  
PROCESS_EXITHANDLER(broadcast_close(&broadcast);)

PROCESS_BEGIN();

SENSORS_ACTIVATE(button_sensor);
	while(counter < 5) //AVERAGE OVER 5 SAMPLES
	{
    		etimer_set(&et, CLOCK_SECOND * 2);
    		SENSORS_ACTIVATE(sht11_sensor);

    		PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
		
		//TEMPERATURE:
     		val = sht11_sensor.value(SHT11_SENSOR_TEMP);

        	if(val != -1) 
        	{
          		s = ((0.01*val) - 39.60);          
        	}

        	dec = s;
        	averageTemperature = averageTemperature + dec;

		//HUMIDITY:
		val =sht11_sensor.value(SHT11_SENSOR_HUMIDITY);
	
		if(val != -1) 
		{
			s= (((0.0405*val) - 4) + ((-2.8 * 0.000001)*(pow(val,2))));  
		}		
      		
		dec = s;
		averageHumidity = averageHumidity + dec;
 
		counter ++;
    	}
    	averageTemperature = averageTemperature/5;
	averageHumidity = averageHumidity/5;
	
	//DISPLAYS AVARAGE TEMPERATURE
   	printf("\nAverage Temperature=%d C\n", averageTemperature);

	//DISPLAY AVARAGE HUMIDITY
	printf("\nAverage Humidity=%d%\n", averageHumidity);
	printf("\n");

	etimer_reset(&et);
	SENSORS_DEACTIVATE(sht11_sensor);
	PROCESS_END();
  }
/*---------------------------------------------------------------------------*/
